/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VisitsImport } from './routes/visits'
import { Route as UsersImport } from './routes/users'
import { Route as NewVisitImport } from './routes/new-visit'
import { Route as NewNotificationImport } from './routes/new-notification'
import { Route as LoginImport } from './routes/login'
import { Route as GuestsImport } from './routes/guests'
import { Route as AddServiceImport } from './routes/add-service'
import { Route as IndexImport } from './routes/index'
import { Route as UsersUserIdImport } from './routes/users_.$userId'
import { Route as ServicesServiceIdImport } from './routes/services_.$serviceId'
import { Route as GuestsGuestIdImport } from './routes/guests_.$guestId'

// Create/Update Routes

const VisitsRoute = VisitsImport.update({
  id: '/visits',
  path: '/visits',
  getParentRoute: () => rootRoute,
} as any)

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const NewVisitRoute = NewVisitImport.update({
  id: '/new-visit',
  path: '/new-visit',
  getParentRoute: () => rootRoute,
} as any)

const NewNotificationRoute = NewNotificationImport.update({
  id: '/new-notification',
  path: '/new-notification',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const GuestsRoute = GuestsImport.update({
  id: '/guests',
  path: '/guests',
  getParentRoute: () => rootRoute,
} as any)

const AddServiceRoute = AddServiceImport.update({
  id: '/add-service',
  path: '/add-service',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/users_/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const ServicesServiceIdRoute = ServicesServiceIdImport.update({
  id: '/services_/$serviceId',
  path: '/services/$serviceId',
  getParentRoute: () => rootRoute,
} as any)

const GuestsGuestIdRoute = GuestsGuestIdImport.update({
  id: '/guests_/$guestId',
  path: '/guests/$guestId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/add-service': {
      id: '/add-service'
      path: '/add-service'
      fullPath: '/add-service'
      preLoaderRoute: typeof AddServiceImport
      parentRoute: typeof rootRoute
    }
    '/guests': {
      id: '/guests'
      path: '/guests'
      fullPath: '/guests'
      preLoaderRoute: typeof GuestsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/new-notification': {
      id: '/new-notification'
      path: '/new-notification'
      fullPath: '/new-notification'
      preLoaderRoute: typeof NewNotificationImport
      parentRoute: typeof rootRoute
    }
    '/new-visit': {
      id: '/new-visit'
      path: '/new-visit'
      fullPath: '/new-visit'
      preLoaderRoute: typeof NewVisitImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/visits': {
      id: '/visits'
      path: '/visits'
      fullPath: '/visits'
      preLoaderRoute: typeof VisitsImport
      parentRoute: typeof rootRoute
    }
    '/guests_/$guestId': {
      id: '/guests_/$guestId'
      path: '/guests/$guestId'
      fullPath: '/guests/$guestId'
      preLoaderRoute: typeof GuestsGuestIdImport
      parentRoute: typeof rootRoute
    }
    '/services_/$serviceId': {
      id: '/services_/$serviceId'
      path: '/services/$serviceId'
      fullPath: '/services/$serviceId'
      preLoaderRoute: typeof ServicesServiceIdImport
      parentRoute: typeof rootRoute
    }
    '/users_/$userId': {
      id: '/users_/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-service': typeof AddServiceRoute
  '/guests': typeof GuestsRoute
  '/login': typeof LoginRoute
  '/new-notification': typeof NewNotificationRoute
  '/new-visit': typeof NewVisitRoute
  '/users': typeof UsersRoute
  '/visits': typeof VisitsRoute
  '/guests/$guestId': typeof GuestsGuestIdRoute
  '/services/$serviceId': typeof ServicesServiceIdRoute
  '/users/$userId': typeof UsersUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-service': typeof AddServiceRoute
  '/guests': typeof GuestsRoute
  '/login': typeof LoginRoute
  '/new-notification': typeof NewNotificationRoute
  '/new-visit': typeof NewVisitRoute
  '/users': typeof UsersRoute
  '/visits': typeof VisitsRoute
  '/guests/$guestId': typeof GuestsGuestIdRoute
  '/services/$serviceId': typeof ServicesServiceIdRoute
  '/users/$userId': typeof UsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/add-service': typeof AddServiceRoute
  '/guests': typeof GuestsRoute
  '/login': typeof LoginRoute
  '/new-notification': typeof NewNotificationRoute
  '/new-visit': typeof NewVisitRoute
  '/users': typeof UsersRoute
  '/visits': typeof VisitsRoute
  '/guests_/$guestId': typeof GuestsGuestIdRoute
  '/services_/$serviceId': typeof ServicesServiceIdRoute
  '/users_/$userId': typeof UsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-service'
    | '/guests'
    | '/login'
    | '/new-notification'
    | '/new-visit'
    | '/users'
    | '/visits'
    | '/guests/$guestId'
    | '/services/$serviceId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add-service'
    | '/guests'
    | '/login'
    | '/new-notification'
    | '/new-visit'
    | '/users'
    | '/visits'
    | '/guests/$guestId'
    | '/services/$serviceId'
    | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/add-service'
    | '/guests'
    | '/login'
    | '/new-notification'
    | '/new-visit'
    | '/users'
    | '/visits'
    | '/guests_/$guestId'
    | '/services_/$serviceId'
    | '/users_/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddServiceRoute: typeof AddServiceRoute
  GuestsRoute: typeof GuestsRoute
  LoginRoute: typeof LoginRoute
  NewNotificationRoute: typeof NewNotificationRoute
  NewVisitRoute: typeof NewVisitRoute
  UsersRoute: typeof UsersRoute
  VisitsRoute: typeof VisitsRoute
  GuestsGuestIdRoute: typeof GuestsGuestIdRoute
  ServicesServiceIdRoute: typeof ServicesServiceIdRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddServiceRoute: AddServiceRoute,
  GuestsRoute: GuestsRoute,
  LoginRoute: LoginRoute,
  NewNotificationRoute: NewNotificationRoute,
  NewVisitRoute: NewVisitRoute,
  UsersRoute: UsersRoute,
  VisitsRoute: VisitsRoute,
  GuestsGuestIdRoute: GuestsGuestIdRoute,
  ServicesServiceIdRoute: ServicesServiceIdRoute,
  UsersUserIdRoute: UsersUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add-service",
        "/guests",
        "/login",
        "/new-notification",
        "/new-visit",
        "/users",
        "/visits",
        "/guests_/$guestId",
        "/services_/$serviceId",
        "/users_/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/add-service": {
      "filePath": "add-service.tsx"
    },
    "/guests": {
      "filePath": "guests.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/new-notification": {
      "filePath": "new-notification.tsx"
    },
    "/new-visit": {
      "filePath": "new-visit.tsx"
    },
    "/users": {
      "filePath": "users.tsx"
    },
    "/visits": {
      "filePath": "visits.tsx"
    },
    "/guests_/$guestId": {
      "filePath": "guests_.$guestId.tsx"
    },
    "/services_/$serviceId": {
      "filePath": "services_.$serviceId.tsx"
    },
    "/users_/$userId": {
      "filePath": "users_.$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
