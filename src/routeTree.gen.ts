/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AuthVisitsImport } from './routes/_auth.visits'
import { Route as AuthUsersImport } from './routes/_auth.users'
import { Route as AuthNewVisitImport } from './routes/_auth.new-visit'
import { Route as AuthNewNotificationImport } from './routes/_auth.new-notification'
import { Route as AuthGuestsImport } from './routes/_auth.guests'
import { Route as AuthAddServiceImport } from './routes/_auth.add-service'
import { Route as AuthUsersUserIdImport } from './routes/_auth.users_.$userId'
import { Route as AuthServicesServiceIdImport } from './routes/_auth.services_.$serviceId'
import { Route as AuthGuestsGuestIdImport } from './routes/_auth.guests_.$guestId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthVisitsRoute = AuthVisitsImport.update({
  id: '/_auth/visits',
  path: '/visits',
  getParentRoute: () => rootRoute,
} as any)

const AuthUsersRoute = AuthUsersImport.update({
  id: '/_auth/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const AuthNewVisitRoute = AuthNewVisitImport.update({
  id: '/_auth/new-visit',
  path: '/new-visit',
  getParentRoute: () => rootRoute,
} as any)

const AuthNewNotificationRoute = AuthNewNotificationImport.update({
  id: '/_auth/new-notification',
  path: '/new-notification',
  getParentRoute: () => rootRoute,
} as any)

const AuthGuestsRoute = AuthGuestsImport.update({
  id: '/_auth/guests',
  path: '/guests',
  getParentRoute: () => rootRoute,
} as any)

const AuthAddServiceRoute = AuthAddServiceImport.update({
  id: '/_auth/add-service',
  path: '/add-service',
  getParentRoute: () => rootRoute,
} as any)

const AuthUsersUserIdRoute = AuthUsersUserIdImport.update({
  id: '/_auth/users_/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const AuthServicesServiceIdRoute = AuthServicesServiceIdImport.update({
  id: '/_auth/services_/$serviceId',
  path: '/services/$serviceId',
  getParentRoute: () => rootRoute,
} as any)

const AuthGuestsGuestIdRoute = AuthGuestsGuestIdImport.update({
  id: '/_auth/guests_/$guestId',
  path: '/guests/$guestId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/add-service': {
      id: '/_auth/add-service'
      path: '/add-service'
      fullPath: '/add-service'
      preLoaderRoute: typeof AuthAddServiceImport
      parentRoute: typeof rootRoute
    }
    '/_auth/guests': {
      id: '/_auth/guests'
      path: '/guests'
      fullPath: '/guests'
      preLoaderRoute: typeof AuthGuestsImport
      parentRoute: typeof rootRoute
    }
    '/_auth/new-notification': {
      id: '/_auth/new-notification'
      path: '/new-notification'
      fullPath: '/new-notification'
      preLoaderRoute: typeof AuthNewNotificationImport
      parentRoute: typeof rootRoute
    }
    '/_auth/new-visit': {
      id: '/_auth/new-visit'
      path: '/new-visit'
      fullPath: '/new-visit'
      preLoaderRoute: typeof AuthNewVisitImport
      parentRoute: typeof rootRoute
    }
    '/_auth/users': {
      id: '/_auth/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersImport
      parentRoute: typeof rootRoute
    }
    '/_auth/visits': {
      id: '/_auth/visits'
      path: '/visits'
      fullPath: '/visits'
      preLoaderRoute: typeof AuthVisitsImport
      parentRoute: typeof rootRoute
    }
    '/_auth/guests_/$guestId': {
      id: '/_auth/guests_/$guestId'
      path: '/guests/$guestId'
      fullPath: '/guests/$guestId'
      preLoaderRoute: typeof AuthGuestsGuestIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/services_/$serviceId': {
      id: '/_auth/services_/$serviceId'
      path: '/services/$serviceId'
      fullPath: '/services/$serviceId'
      preLoaderRoute: typeof AuthServicesServiceIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/users_/$userId': {
      id: '/_auth/users_/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthUsersUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/add-service': typeof AuthAddServiceRoute
  '/guests': typeof AuthGuestsRoute
  '/new-notification': typeof AuthNewNotificationRoute
  '/new-visit': typeof AuthNewVisitRoute
  '/users': typeof AuthUsersRoute
  '/visits': typeof AuthVisitsRoute
  '/guests/$guestId': typeof AuthGuestsGuestIdRoute
  '/services/$serviceId': typeof AuthServicesServiceIdRoute
  '/users/$userId': typeof AuthUsersUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/add-service': typeof AuthAddServiceRoute
  '/guests': typeof AuthGuestsRoute
  '/new-notification': typeof AuthNewNotificationRoute
  '/new-visit': typeof AuthNewVisitRoute
  '/users': typeof AuthUsersRoute
  '/visits': typeof AuthVisitsRoute
  '/guests/$guestId': typeof AuthGuestsGuestIdRoute
  '/services/$serviceId': typeof AuthServicesServiceIdRoute
  '/users/$userId': typeof AuthUsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/_auth/add-service': typeof AuthAddServiceRoute
  '/_auth/guests': typeof AuthGuestsRoute
  '/_auth/new-notification': typeof AuthNewNotificationRoute
  '/_auth/new-visit': typeof AuthNewVisitRoute
  '/_auth/users': typeof AuthUsersRoute
  '/_auth/visits': typeof AuthVisitsRoute
  '/_auth/guests_/$guestId': typeof AuthGuestsGuestIdRoute
  '/_auth/services_/$serviceId': typeof AuthServicesServiceIdRoute
  '/_auth/users_/$userId': typeof AuthUsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/add-service'
    | '/guests'
    | '/new-notification'
    | '/new-visit'
    | '/users'
    | '/visits'
    | '/guests/$guestId'
    | '/services/$serviceId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/add-service'
    | '/guests'
    | '/new-notification'
    | '/new-visit'
    | '/users'
    | '/visits'
    | '/guests/$guestId'
    | '/services/$serviceId'
    | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/_auth/add-service'
    | '/_auth/guests'
    | '/_auth/new-notification'
    | '/_auth/new-visit'
    | '/_auth/users'
    | '/_auth/visits'
    | '/_auth/guests_/$guestId'
    | '/_auth/services_/$serviceId'
    | '/_auth/users_/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AuthAddServiceRoute: typeof AuthAddServiceRoute
  AuthGuestsRoute: typeof AuthGuestsRoute
  AuthNewNotificationRoute: typeof AuthNewNotificationRoute
  AuthNewVisitRoute: typeof AuthNewVisitRoute
  AuthUsersRoute: typeof AuthUsersRoute
  AuthVisitsRoute: typeof AuthVisitsRoute
  AuthGuestsGuestIdRoute: typeof AuthGuestsGuestIdRoute
  AuthServicesServiceIdRoute: typeof AuthServicesServiceIdRoute
  AuthUsersUserIdRoute: typeof AuthUsersUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AuthAddServiceRoute: AuthAddServiceRoute,
  AuthGuestsRoute: AuthGuestsRoute,
  AuthNewNotificationRoute: AuthNewNotificationRoute,
  AuthNewVisitRoute: AuthNewVisitRoute,
  AuthUsersRoute: AuthUsersRoute,
  AuthVisitsRoute: AuthVisitsRoute,
  AuthGuestsGuestIdRoute: AuthGuestsGuestIdRoute,
  AuthServicesServiceIdRoute: AuthServicesServiceIdRoute,
  AuthUsersUserIdRoute: AuthUsersUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/_auth/add-service",
        "/_auth/guests",
        "/_auth/new-notification",
        "/_auth/new-visit",
        "/_auth/users",
        "/_auth/visits",
        "/_auth/guests_/$guestId",
        "/_auth/services_/$serviceId",
        "/_auth/users_/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/add-service": {
      "filePath": "_auth.add-service.tsx"
    },
    "/_auth/guests": {
      "filePath": "_auth.guests.tsx"
    },
    "/_auth/new-notification": {
      "filePath": "_auth.new-notification.tsx"
    },
    "/_auth/new-visit": {
      "filePath": "_auth.new-visit.tsx"
    },
    "/_auth/users": {
      "filePath": "_auth.users.tsx"
    },
    "/_auth/visits": {
      "filePath": "_auth.visits.tsx"
    },
    "/_auth/guests_/$guestId": {
      "filePath": "_auth.guests_.$guestId.tsx"
    },
    "/_auth/services_/$serviceId": {
      "filePath": "_auth.services_.$serviceId.tsx"
    },
    "/_auth/users_/$userId": {
      "filePath": "_auth.users_.$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
